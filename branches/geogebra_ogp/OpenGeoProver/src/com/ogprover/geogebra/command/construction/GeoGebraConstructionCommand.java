/* 
 * DISCLAIMER PLACEHOLDER 
 */

package com.ogprover.geogebra.command.construction;

import java.util.ArrayList;

import com.ogprover.geogebra.GeoGebraObject;
import com.ogprover.geogebra.command.GeoGebraCommand;


/**
* <dl>
* <dt><b>Class description:</b></dt>
* <dd>Abstract class for GeoGebra's commands used for constructions of geometry objects</dd>
* </dl>
* 
* @version 1.00
* @author Ivan Petrovic
*/
public abstract class GeoGebraConstructionCommand implements GeoGebraCommand, GeoGebraObject {
	/*
	 * ======================================================================
	 * ========================== VARIABLES =================================
	 * ======================================================================
	 */
	/**
	 * <i><b>
	 * Version number of class in form xx.yy where
	 * xx is major version/release number and yy is minor
	 * release number.
	 * </b></i>
	 */
	public static final String VERSION_NUM = "1.00"; // this should match the version number from class comment
	
	/**
	 * Static constants for command names.
	 */
	// Points
	public static final String COMMAND_FREE_POINT = "FreePoint";  // note: this is not the real GeoGebra command but the artificial one
	public static final String COMMAND_POINT = "Point"; // Random point on some set of points (line, circle, segment, polygon) or point on specified distance
	public static final String COMMAND_POINT_IN = "PointIn"; // Random point inside polygon or some other geometry object with interior
	public static final String COMMAND_INTERSECT = "Intersect";
	public static final String COMMAND_MIDPOINT = "Midpoint";
	public static final String COMMAND_CENTER = "Center"; // center of circle/conic
	// Lines
	public static final String COMMAND_LINE = "Line"; // Line through two points or parallel line
	public static final String COMMAND_ORT_LINE = "OrthogonalLine";
	public static final String COMMAND_LINE_BISECTOR = "LineBisector"; // Perpendicular bisector of segment
	public static final String COMMAND_ANG_BISECTOR = "AngularBisector";
	public static final String COMMAND_TANGENT = "Tangent";
	public static final String COMMAND_POLAR = "Polar"; // polar line
	public static final String COMMAND_DIAMETER = "Diameter"; // diameter line
	// Conics
	public static final String COMMAND_CIRCLE = "Circle"; // all types of circles
	public static final String COMMAND_CONIC = "Conic"; // conic through five points
	public static final String COMMAND_ELLIPSE = "Ellipse";
	public static final String COMMAND_HYPERBOLA = "Hyperbola";
	public static final String COMMAND_PARABOLA = "Parabola";
	// Transformations
	public static final String COMMAND_MIRROR = "Mirror"; // all types of reflections (w.r.t line or point or circle - inversion)
	public static final String COMMAND_ROTATE = "Rotate";
	public static final String COMMAND_TRANSLATE = "Translate";
	public static final String COMMAND_DILATE = "Dilate";
	// Other auxiliary geometry objects
	public static final String COMMAND_SEGMENT = "Segment";
	public static final String COMMAND_POLYGON = "Polygon";
	public static final String COMMAND_POLYLINE = "PolyLine";
	public static final String COMMAND_RAY = "Ray";
	public static final String COMMAND_ANGLE = "Angle";
	public static final String COMMAND_VECTOR = "Vector";
	public static final String COMMAND_SEMICIRCLE = "Semicircle";
	public static final String COMMAND_CIRCLE_ARC = "CircleArc";
	public static final String COMMAND_CCIRCLE_ARC = "CircumcircleArc";
	public static final String COMMAND_CIRCLE_SECTOR = "CircleSector";
	public static final String COMMAND_CCIRCLE_SECTOR = "CircumcircleSector";
	// TODO - add here other commands ...
	
	/*
	 * Data members
	 */
	/**
	 * List of input arguments which are labels of existing objects. 
	 */
	protected ArrayList<String> inputArgs;
	/**
	 * List of output arguments which are labels of new objects.
	 */
	protected ArrayList<String> outputArgs;
	/**
	 * The type of main object(s) generated by this command.
	 */
	protected String objectType;
	
	
	/*
	 * ======================================================================
	 * ========================== GETTERS/SETTERS ===========================
	 * ======================================================================
	 */
	/**
	 * @return the inputArgs
	 */
	public ArrayList<String> getInputArgs() {
		return inputArgs;
	}

	/**
	 * @param inputArgs the inputArgs to set
	 */
	public void setInputArgs(ArrayList<String> inputArgs) {
		this.inputArgs = inputArgs;
	}

	/**
	 * @return the outputArgs
	 */
	public ArrayList<String> getOutputArgs() {
		return outputArgs;
	}

	/**
	 * @param outputArgs the outputArgs to set
	 */
	public void setOutputArgs(ArrayList<String> outputArgs) {
		this.outputArgs = outputArgs;
	}

	/**
	 * @return the objectType
	 * 
	 * @see com.ogprover.geogebra.GeoGebraObject#getObjectType()
	 */
	public String getObjectType() {
		return objectType;
	}

	/**
	 * @param objectType the objectType to set
	 */
	public void setObjectType(String objectType) {
		this.objectType = objectType;
	}
	
	/**
	 * @see com.ogprover.pp.tp.geoobject.GeoObject#getGeoObjectLabel()
	 */
	public String getGeoObjectLabel() {
		/*
		 * Return the label of first main output object. 
		 * Note: do not use this method when there are two or more main output objects 
		 * (e.g. use for construction of polygon since it has one main output object - the polygon,
		 * and several other objects which are segments or vertices; but do not use this method
		 * for construction of tangent line since the output could have 2 lines which are both
		 * main objects).
		 */
		return (this.outputArgs != null && this.outputArgs.size()>0) ? this.outputArgs.get(0) : null;
	}
	
	
	
	/*
	 * ======================================================================
	 * ========================== CONSTRUCTORS ==============================
	 * ======================================================================
	 */
	/**
	 * Default (implicit) constructor method.
	 */
	public GeoGebraConstructionCommand() {
		this.inputArgs = null;
		this.outputArgs = null;
		this.objectType = GeoGebraObject.OBJ_TYPE_NONE;
	}
	
	/**
	 * Constructor method.
	 * 
	 * @param inputArgs		List of input arguments - labels of existing objects.
	 * @param outputArgs	List of output arguments - labels of new objects.
	 * @param objType		The type of new constructed object.
	 */
	public GeoGebraConstructionCommand(ArrayList<String> inputArgs, ArrayList<String> outputArgs, String objType) {
		this.inputArgs = inputArgs;
		this.outputArgs = outputArgs;
		this.objectType = objType;
	}
	
	
	
	/*
	 * ======================================================================
	 * ========================== SPECIFIC METHODS ==========================
	 * ======================================================================
	 */
	/**
	 * Method which retrieves the brief string description of GeoGebra command
	 * from OGP's internal representation. The description contains the name
	 * of command, the label of constructed main object and its type. This method
	 * should be used when it is necessary to easily identify the command object
	 * e.g. in log messages.
	 * 
	 * @return	String representing the description of GeoGebra command.
	 * 
	 * @see com.ogprover.geogebra.command.GeoGebraCommand#getDescription()
	 */
	public String getDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("GGCmd[CmdName:");
		sb.append(this.getCommandName());
		sb.append(", ObjLabel:");
		sb.append(this.getGeoObjectLabel());
		sb.append(", ObjType:");
		sb.append(this.objectType);
		sb.append("]");
		
		return sb.toString();
	}
	
	/**
	 * @see com.ogprover.geogebra.command.GeoGebraCommand#getResultType()
	 */
	public String getResultType() {
		return this.getObjectType();
	}
}
